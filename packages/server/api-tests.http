# Devbox Server API Tests
# 使用 VS Code REST Client 插件或 IntelliJ HTTP Client
# 或者用 Postman 导入

@baseUrl = http://localhost:3000

###############################################################################
# 健康检查 Health Check
###############################################################################

### 1. 基础健康检查
GET {{baseUrl}}/health

### 2. 详细健康信息
GET {{baseUrl}}/health/detailed

### 3. 服务器指标
GET {{baseUrl}}/metrics

###############################################################################
# 文件操作 File Operations
###############################################################################

### 4b. 创建 workspace 目录（通过写入占位文件触发目录创建）
POST {{baseUrl}}/files/write
Content-Type: application/json

{
  "path": "/.keep",
  "content": "",
  "encoding": "utf8"
}

### 4. 写入文件 - UTF8
POST {{baseUrl}}/files/write 
Content-Type: application/json

{
  "path": "/test.txt",
  "content": "Hello Devbox Server! 🚀",
  "encoding": "utf8"
}

### 5. 读取文件 - UTF8
POST {{baseUrl}}/files/read
Content-Type: application/json

{
  "path": "/test.txt",
  "encoding": "utf8"
}

### 6. 写入文件 - Base64
POST {{baseUrl}}/files/write
Content-Type: application/json

{
  "path": "/binary-test.bin",
  "content": "SGVsbG8gV29ybGQh",
  "encoding": "base64"
}

### 7. 批量上传文件
POST {{baseUrl}}/files/batch-upload
Content-Type: application/json

{
  "files": [
    {
      "path": "/file1.txt",
      "content": "Content 1",
      "encoding": "utf8"
    },
    {
      "path": "/file2.txt",
      "content": "Content 2",
      "encoding": "utf8"
    },
    {
      "path": "/file3.txt",
      "content": "Content 3",
      "encoding": "utf8"
    }
  ]
}

### 8. 删除文件
POST {{baseUrl}}/files/delete
Content-Type: application/json

{
  "path": "/test.txt"
}

###############################################################################
# 进程管理 Process Management
###############################################################################

### 9. 执行命令 - Echo
POST {{baseUrl}}/process/exec
Content-Type: application/json

{
  "command": "echo",
  "args": ["Hello", "from", "Devbox"],
  "cwd": ""
}

### 10. 执行命令 - ls
POST {{baseUrl}}/process/exec
Content-Type: application/json

{
  "command": "ls",
  "args": ["-la"],
  "cwd": ""
}

### 11. 执行命令 - pwd
POST {{baseUrl}}/process/exec
Content-Type: application/json

{
  "command": "pwd",
  "cwd": ""
}

### 12. 执行命令 - 带环境变量
POST {{baseUrl}}/process/exec
Content-Type: application/json

{
  "command": "env",
  "env": {
    "CUSTOM_VAR": "custom_value",
    "TEST_ENV": "test123"
  },
  "cwd": ""
}

### 13. 列出所有进程
GET {{baseUrl}}/process/list

### 14. 查询进程状态（需要替换实际的进程ID）
# 先执行一个进程，获取 ID，然后替换下面的 {processId}
GET {{baseUrl}}/process/status/proc_1234567890_abcdefg

### 15. 获取进程日志（需要替换实际的进程ID）
GET {{baseUrl}}/process/logs/proc_1234567890_abcdefg?tail=100

### 16. 终止进程（需要替换实际的进程ID）
POST {{baseUrl}}/process/kill
Content-Type: application/json

{
  "id": "proc_1234567890_abcdefg",
  "signal": "SIGTERM"
}

### 16b. 执行命令但超时（应返回 failed/被杀死）
POST {{baseUrl}}/process/exec
Content-Type: application/json

{
  "command": "sleep",
  "args": ["5"],
  "cwd": "",
  "timeout": 1000
}

###############################################################################
# 会话管理 Session Management
###############################################################################

### 17. 创建会话 - Bash
POST {{baseUrl}}/sessions/create
Content-Type: application/json

{
  "workingDir": "",
  "shell": "/bin/zsh",
  "env": {
    "SESSION_TYPE": "test",
    "USER_NAME": "devbox-user"
  }
}

### 18. 创建会话 - Zsh
POST {{baseUrl}}/sessions/create
Content-Type: application/json

{
  "workingDir": "",
  "shell": "zsh"
}

### 19. 列出所有会话
GET {{baseUrl}}/sessions

### 20. 获取会话信息（需要替换实际的会话ID）
# 先创建会话，获取 ID，然后替换下面的 {sessionId}
GET {{baseUrl}}/sessions/session_1234567890_abcdefg

### 21. 在会话中执行命令
POST {{baseUrl}}/sessions/session_1234567890_abcdefg/exec
Content-Type: application/json

{
  "command": "echo 'Hello from session'"
}

### 22. 在会话中执行多个命令
POST {{baseUrl}}/sessions/session_1234567890_abcdefg/exec
Content-Type: application/json

{
  "command": "pwd && ls -la && echo 'Done'"
}

### 23. 更新会话环境变量
POST {{baseUrl}}/sessions/session_1234567890_abcdefg/env
Content-Type: application/json

{
  "env": {
    "NEW_VAR": "new_value",
    "UPDATED_VAR": "updated_value"
  }
}

### 24. 切换会话工作目录
POST {{baseUrl}}/sessions/session_1234567890_abcdefg/cd
Content-Type: application/json

{
  "path": "/tmp"
}

### 25. 终止会话
POST {{baseUrl}}/sessions/session_1234567890_abcdefg/terminate

###############################################################################
# 验证测试 Validation Tests
###############################################################################

### 26. 测试验证 - 空路径（应返回 400）
POST {{baseUrl}}/files/write
Content-Type: application/json

{
  "path": "",
  "content": "test"
}

### 27. 测试验证 - 无效编码（应返回 400）
POST {{baseUrl}}/files/read
Content-Type: application/json

{
  "path": "/test.txt",
  "encoding": "invalid_encoding"
}

### 28. 测试验证 - 缺少必需字段（应返回 400）
POST {{baseUrl}}/process/exec
Content-Type: application/json

{
  "args": ["test"]
}

### 29. 测试验证 - 无效的批量上传（应返回 400）
POST {{baseUrl}}/files/batch-upload
Content-Type: application/json

{
  "files": []
}

###############################################################################
# 错误处理 Error Handling Tests
###############################################################################

### 30. 读取不存在的文件（应返回 404）
POST {{baseUrl}}/files/read
Content-Type: application/json

{
  "path": "/non-existent-file.txt"
}

### 31. 访问不存在的端点（应返回 404）
GET {{baseUrl}}/non-existent-endpoint

### 32. 无效的 JSON（应返回 400）
POST {{baseUrl}}/files/write
Content-Type: application/json

{invalid json}

###############################################################################
# WebSocket 连接测试
# 注意：需要使用 WebSocket 客户端工具测试
###############################################################################

### 33. WebSocket 端点检查
GET {{baseUrl}}/ws

###############################################################################
# 压力测试 Stress Tests
###############################################################################

### 34. 大文件写入测试
POST {{baseUrl}}/files/write
Content-Type: application/json

{
  "path": "/large-file.txt",
  "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
  "encoding": "utf8"
}

### 35. 并发进程执行测试
POST {{baseUrl}}/process/exec
Content-Type: application/json

{
  "command": "sleep",
  "args": ["5"],
  "cwd": ""
}

