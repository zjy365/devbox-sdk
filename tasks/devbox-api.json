{
  "openapi": "3.0.0",
  "info": {
    "title": "Devbox API",
    "version": "1.0.0",
    "description": "# Devbox API Documentation\n\n## Overview\nThis API provides comprehensive management capabilities for Devbox instances, including lifecycle operations, release management, and runtime configurations.\n\n## Authentication\nAll endpoints require authentication via:\n- **kubeconfig**: Standard Kubernetes configuration for cluster access\n- **JWT Token**: Bearer token for user authentication\n\n## Base URLs\n- **Development**: http://127.0.0.1:3000\n- **Production**: https://devbox.{sealosDomain}\n\n## Key Concepts\n- **Devbox**: A containerized development environment with pre-configured runtime and resources\n- **Runtime**: Pre-built environment templates (e.g., Node.js, Python, Go)\n- **Release**: Versioned snapshots of devbox state that can be deployed\n- **Ports**: Network configurations for accessing devbox services\n\n## API Organization\nAPIs are organized into two main groups following GraphQL conventions:\n- **Query**: Read-only operations for retrieving data (GET requests)\n- **Mutation**: Write operations that modify data (POST/PUT/PATCH/DELETE requests)"
  },
  "tags": [
    {
      "name": "Query",
      "description": "Read-only operations for retrieving data. These endpoints fetch information without modifying any resources."
    },
    {
      "name": "Mutation",
      "description": "Write operations that create, update, or delete resources. These endpoints modify the system state."
    }
  ],
  "servers": [
    {
      "url": "http://127.0.0.1:3000",
      "description": "Development"
    },
    {
      "url": "https://devbox.",
      "description": "Production"
    }
  ],
  "security": [
    {
      "kubeconfigAuth": [],
      "jwtAuth": []
    }
  ],
  "paths": {
    "/api/v1/devbox": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Get list of all devboxes in current namespace",
        "description": "Retrieve a list of all Devbox instances in the current user's namespace with resource information.\n\n**Key Features:**\n- **List All Devboxes**: Get all devbox instances in your namespace\n- **Resource Information**: View CPU and memory allocation for each devbox\n- **Runtime Details**: See the runtime environment for each devbox\n- **Status Tracking**: Check the current status of each devbox\n\n**No Parameters Required:**\nThis endpoint requires no query parameters or request body.\n\n**Response Data:**\nReturns an array of devbox objects, each containing:\n- `name`: Devbox name\n- `uid`: Unique identifier\n- `resourceType`: Always \"devbox\"\n- `runtime`: Runtime environment (e.g., node.js, python, go)\n- `status`: Current status (Pending, Running, Stopped, etc.)\n- `resources`: CPU (in millicores) and memory (in Mi)\n\n**Error Codes:**\n- `500`: Failed to retrieve devbox list from Kubernetes or database",
        "responses": {
          "200": {
            "description": "Successfully retrieved devbox list with resource allocation and runtime information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Devbox name"
                          },
                          "uid": {
                            "type": "string",
                            "description": "Devbox UID"
                          },
                          "resourceType": {
                            "type": "string",
                            "default": "devbox",
                            "description": "Resource type"
                          },
                          "runtime": {
                            "type": "string",
                            "description": "Runtime environment (e.g., go, python, node.js)"
                          },
                          "status": {
                            "type": "string",
                            "description": "Devbox status (Pending, Running, Stopped, etc.)"
                          },
                          "resources": {
                            "type": "object",
                            "properties": {
                              "cpu": {
                                "type": "number",
                                "description": "CPU in millicores (e.g., 1000 = 1 core)"
                              },
                              "memory": {
                                "type": "number",
                                "description": "Memory in Mi (e.g., 2048 = 2Gi)"
                              }
                            },
                            "required": [
                              "cpu",
                              "memory"
                            ],
                            "description": "Resource allocation"
                          }
                        },
                        "required": [
                          "name",
                          "uid",
                          "resourceType",
                          "runtime",
                          "status",
                          "resources"
                        ]
                      }
                    }
                  },
                  "required": [
                    "data"
                  ]
                },
                "examples": {
                  "success": {
                    "summary": "Devbox list retrieved",
                    "value": {
                      "data": [
                        {
                          "name": "my-nodejs-app",
                          "uid": "abc123-def456",
                          "resourceType": "devbox",
                          "runtime": "node.js",
                          "status": "Running",
                          "resources": {
                            "cpu": 1000,
                            "memory": 2048
                          }
                        },
                        {
                          "name": "python-api",
                          "uid": "ghi789-jkl012",
                          "resourceType": "devbox",
                          "runtime": "python",
                          "status": "Stopped",
                          "resources": {
                            "cpu": 2000,
                            "memory": 4096
                          }
                        }
                      ]
                    }
                  },
                  "empty_list": {
                    "summary": "No devboxes found",
                    "value": {
                      "data": []
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to retrieve devbox list from Kubernetes or match templates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "retrieval_failed": {
                    "summary": "Failed to get devbox list",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "data": "Failed to list devboxes from Kubernetes"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Create a new devbox with runtime and port configuration",
        "description": "Create a new Devbox development environment instance with customizable runtime, resource allocation, and port configurations.\n\n**Key Features:**\n- **Runtime Selection**: Choose from multiple pre-configured runtime environments (Node.js, Python, Go, etc.)\n- **Resource Configuration**: Customize CPU and memory allocation\n- **Port Management**: Configure multiple ports with optional public domain access\n- **Environment Variables**: Set custom environment variables with direct values or Secret references\n- **Auto-start**: Optionally auto-start the Devbox after creation\n\n**Request Parameters:**\n- `name`: Devbox name (must comply with Kubernetes DNS naming conventions)\n- `runtime`: Runtime environment name (get available options from /api/v1/devbox/templates)\n- `resource`: CPU and memory resource configuration\n- `ports`: Array of port configurations with protocol and public access settings\n- `env`: Array of environment variables supporting direct values or Secret references\n- `autostart`: Whether to automatically start the Devbox after creation\n\n**Response Data:**\nReturns Devbox connection information including SSH port and private key, username and working directory, port access addresses (public and private), and creation status summary.\n\n**Error Codes:**\n- `400`: Invalid request parameters or validation failure\n- `404`: Specified runtime environment not found\n- `409`: Devbox name already exists\n- `500`: Internal server error or resource creation failure",
        "requestBody": {
          "description": "Devbox creation configuration including runtime, resources, ports, and environment settings",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
                    "minLength": 1,
                    "maxLength": 63,
                    "description": "Devbox name (must be DNS compliant: lowercase, numbers, hyphens, 1-63 chars)"
                  },
                  "runtime": {
                    "type": "string",
                    "enum": [
                      "nuxt3",
                      "angular",
                      "quarkus",
                      "ubuntu",
                      "flask",
                      "java",
                      "chi",
                      "net",
                      "iris",
                      "hexo",
                      "python",
                      "docusaurus",
                      "vitepress",
                      "cpp",
                      "vue",
                      "nginx",
                      "rocket",
                      "debian-ssh",
                      "vert.x",
                      "express.js",
                      "django",
                      "next.js",
                      "sealaf",
                      "go",
                      "react",
                      "php",
                      "svelte",
                      "c",
                      "astro",
                      "umi",
                      "gin",
                      "node.js",
                      "echo",
                      "rust"
                    ],
                    "description": "Runtime environment name"
                  },
                  "resource": {
                    "type": "object",
                    "properties": {
                      "cpu": {
                        "anyOf": [
                          {
                            "type": "number",
                            "enum": [
                              0.1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              0.2
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              0.5
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              2
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              4
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              8
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              16
                            ]
                          }
                        ],
                        "description": "CPU allocation in cores",
                        "example": 1
                      },
                      "memory": {
                        "anyOf": [
                          {
                            "type": "number",
                            "enum": [
                              0.1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              0.5
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              2
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              4
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              8
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              16
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              32
                            ]
                          }
                        ],
                        "description": "Memory allocation in GB",
                        "example": 2
                      }
                    },
                    "required": [
                      "cpu",
                      "memory"
                    ],
                    "description": "Resource allocation for CPU and memory"
                  },
                  "ports": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "number": {
                          "type": "number",
                          "minimum": 1,
                          "maximum": 65535,
                          "description": "Port number (1-65535)"
                        },
                        "protocol": {
                          "type": "string",
                          "enum": [
                            "HTTP",
                            "GRPC",
                            "WS"
                          ],
                          "description": "Protocol type, defaults to HTTP",
                          "default": "HTTP"
                        },
                        "exposesPublicDomain": {
                          "type": "boolean",
                          "default": true,
                          "description": "Enable public domain access, defaults to true"
                        },
                        "customDomain": {
                          "type": "string",
                          "description": "Custom domain (optional)"
                        }
                      },
                      "required": [
                        "number"
                      ]
                    },
                    "default": [],
                    "description": "Port configurations (optional, can be empty)"
                  },
                  "env": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "description": "Environment variable name"
                        },
                        "value": {
                          "type": "string",
                          "description": "Environment variable value"
                        },
                        "valueFrom": {
                          "type": "object",
                          "properties": {
                            "secretKeyRef": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string",
                                  "description": "Secret key"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Secret name"
                                }
                              },
                              "required": [
                                "key",
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "secretKeyRef"
                          ],
                          "description": "Source for the environment variable value"
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "default": [],
                    "description": "Environment variables (optional, can be empty)"
                  },
                  "autostart": {
                    "type": "boolean",
                    "default": false,
                    "description": "Auto start devbox after creation (defaults to false)"
                  }
                },
                "required": [
                  "name",
                  "runtime",
                  "resource"
                ]
              },
              "examples": {
                "basic": {
                  "summary": "Basic Devbox with Node.js runtime",
                  "value": {
                    "name": "my-nodejs-app",
                    "runtime": "node.js",
                    "resource": {
                      "cpu": 1,
                      "memory": 2
                    }
                  }
                },
                "advanced": {
                  "summary": "Advanced Devbox with ports and environment variables",
                  "value": {
                    "name": "my-python-api",
                    "runtime": "python",
                    "resource": {
                      "cpu": 2,
                      "memory": 4
                    },
                    "ports": [
                      {
                        "number": 8000,
                        "protocol": "HTTP",
                        "exposesPublicDomain": true
                      }
                    ],
                    "env": [
                      {
                        "name": "DEBUG",
                        "value": "true"
                      }
                    ],
                    "autostart": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox created successfully. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters, malformed JSON, or validation errors in the request body.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "validation_error": {
                    "summary": "Validation error example",
                    "value": {
                      "code": 400,
                      "message": "Invalid request body",
                      "error": [
                        {
                          "path": [
                            "name"
                          ],
                          "message": "String must contain at least 1 character(s)"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified runtime environment does not exist or is not available.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "runtime_not_found": {
                    "summary": "Runtime not found example",
                    "value": {
                      "code": 404,
                      "message": "Runtime 'invalid-runtime' not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - A Devbox with the specified name already exists in the current namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "name_conflict": {
                    "summary": "Name conflict example",
                    "value": {
                      "code": 409,
                      "message": "Devbox already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to create Devbox due to server-side issues or resource constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "data": "Failed to create Kubernetes resources"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Get detailed information about a specific devbox",
        "description": "Retrieve comprehensive details about a specific Devbox including configuration, status, resources, ports, and SSH access information.\n\n**Key Features:**\n- **Complete Details**: Get all configuration and status information for a Devbox\n- **Resource Information**: View current CPU and memory allocation\n- **Port Configuration**: See all port mappings with public/private addresses\n- **SSH Access**: Get SSH connection details including host, port, and working directory\n- **Environment Variables**: View all configured environment variables\n- **Runtime Details**: See the runtime environment and container image\n- **Pod Status**: Check the status of underlying pods (optional)\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n\n**Response Data:**\nReturns complete Devbox information including:\n- Basic information (name, uid, resourceType, runtime, image, status)\n- Resource allocation (cpu, memory)\n- SSH connection details (host, port, user, workingDir, privateKey)\n- Environment variables (optional)\n- Port configurations with public and private access details\n- Pod information (optional)\n- Operational status (optional)\n\n**Error Codes:**\n- `400`: Invalid devbox name format\n- `404`: Devbox not found\n- `500`: Internal server error or failed to retrieve devbox information",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved devbox details with complete configuration and status information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Devbox name",
                          "example": "my-devbox"
                        },
                        "uid": {
                          "type": "string",
                          "description": "Unique identifier",
                          "example": "abc123-def456"
                        },
                        "resourceType": {
                          "type": "string",
                          "default": "devbox",
                          "description": "Resource type",
                          "example": "devbox"
                        },
                        "runtime": {
                          "type": "string",
                          "description": "Runtime environment name",
                          "example": "node.js"
                        },
                        "image": {
                          "type": "string",
                          "description": "Container image",
                          "example": "ghcr.io/labring/sealos-devbox-nodejs:latest"
                        },
                        "status": {
                          "type": "string",
                          "description": "Devbox status (Running, Stopped, Pending, etc.)",
                          "example": "Running"
                        },
                        "resources": {
                          "type": "object",
                          "properties": {
                            "cpu": {
                              "type": "number",
                              "description": "CPU allocation in cores (e.g., 1000 millicores = 1 core)",
                              "example": 1000
                            },
                            "memory": {
                              "type": "number",
                              "description": "Memory allocation in Mi",
                              "example": 2048
                            }
                          },
                          "required": [
                            "cpu",
                            "memory"
                          ],
                          "description": "CPU and memory resources"
                        },
                        "ssh": {
                          "type": "object",
                          "properties": {
                            "host": {
                              "type": "string",
                              "description": "SSH host address",
                              "example": "devbox.cloud.sealos.io"
                            },
                            "port": {
                              "type": "number",
                              "description": "SSH port number",
                              "example": 40001
                            },
                            "user": {
                              "type": "string",
                              "description": "SSH username",
                              "example": "devbox"
                            },
                            "workingDir": {
                              "type": "string",
                              "description": "Working directory path",
                              "example": "/home/devbox/project"
                            },
                            "privateKey": {
                              "type": "string",
                              "description": "Base64 encoded private key (optional)"
                            }
                          },
                          "required": [
                            "host",
                            "port",
                            "user",
                            "workingDir"
                          ],
                          "description": "SSH connection details"
                        },
                        "env": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Environment variable name"
                              },
                              "value": {
                                "type": "string",
                                "description": "Direct value of the environment variable"
                              },
                              "valueFrom": {
                                "type": "object",
                                "properties": {
                                  "secretKeyRef": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Secret name"
                                      },
                                      "key": {
                                        "type": "string",
                                        "description": "Secret key"
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "key"
                                    ]
                                  }
                                },
                                "required": [
                                  "secretKeyRef"
                                ],
                                "description": "Reference to a secret value"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "description": "Environment variable configuration"
                          },
                          "description": "Environment variables (optional)"
                        },
                        "ports": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "number": {
                                "type": "number",
                                "description": "Port number",
                                "example": 8080
                              },
                              "portName": {
                                "type": "string",
                                "description": "Port name identifier"
                              },
                              "protocol": {
                                "type": "string",
                                "description": "Protocol type (HTTP, GRPC, WS)",
                                "example": "HTTP"
                              },
                              "serviceName": {
                                "type": "string",
                                "description": "Kubernetes service name"
                              },
                              "privateAddress": {
                                "type": "string",
                                "description": "Private access address",
                                "example": "http://my-devbox.ns-user123:8080"
                              },
                              "privateHost": {
                                "type": "string",
                                "description": "Private host",
                                "example": "my-devbox.ns-user123"
                              },
                              "networkName": {
                                "type": "string",
                                "description": "Network/Ingress name"
                              },
                              "publicHost": {
                                "type": "string",
                                "description": "Public host domain",
                                "example": "xyz789.cloud.sealos.io"
                              },
                              "publicAddress": {
                                "type": "string",
                                "description": "Public access address",
                                "example": "https://xyz789.cloud.sealos.io"
                              },
                              "customDomain": {
                                "type": "string",
                                "description": "Custom domain (if configured)"
                              }
                            },
                            "required": [
                              "number"
                            ],
                            "description": "Port configuration details"
                          },
                          "description": "Port configurations"
                        },
                        "pods": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Pod name"
                              },
                              "status": {
                                "type": "string",
                                "description": "Pod status (Running, Pending, Failed, etc.)",
                                "example": "Running"
                              }
                            },
                            "required": [
                              "name",
                              "status"
                            ],
                            "description": "Pod information"
                          },
                          "description": "Pod information (optional)"
                        },
                        "operationalStatus": {
                          "description": "Operational status details (optional)"
                        }
                      },
                      "required": [
                        "name",
                        "uid",
                        "resourceType",
                        "runtime",
                        "image",
                        "status",
                        "resources",
                        "ssh",
                        "ports"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ],
                  "title": "Get DevBox Detail Response",
                  "description": "Response schema for getting Devbox details"
                },
                "examples": {
                  "success": {
                    "summary": "Devbox details retrieved",
                    "value": {
                      "data": {
                        "name": "my-nodejs-app",
                        "uid": "abc123-def456-ghi789",
                        "resourceType": "devbox",
                        "runtime": "node.js",
                        "image": "ghcr.io/labring/sealos-devbox-nodejs:latest",
                        "status": "Running",
                        "resources": {
                          "cpu": 1000,
                          "memory": 2048
                        },
                        "ssh": {
                          "host": "devbox.cloud.sealos.io",
                          "port": 40001,
                          "user": "devbox",
                          "workingDir": "/home/devbox/project",
                          "privateKey": "LS0tLS1CRUdJTi..."
                        },
                        "env": [
                          {
                            "name": "NODE_ENV",
                            "value": "development"
                          },
                          {
                            "name": "DATABASE_URL",
                            "valueFrom": {
                              "secretKeyRef": {
                                "name": "my-secrets",
                                "key": "db-url"
                              }
                            }
                          }
                        ],
                        "ports": [
                          {
                            "number": 8080,
                            "portName": "port-abc123",
                            "protocol": "HTTP",
                            "serviceName": "my-nodejs-app",
                            "privateAddress": "http://my-nodejs-app.ns-user123:8080",
                            "privateHost": "my-nodejs-app.ns-user123",
                            "networkName": "network-def456",
                            "publicHost": "xyz789.cloud.sealos.io",
                            "publicAddress": "https://xyz789.cloud.sealos.io",
                            "customDomain": ""
                          }
                        ],
                        "pods": [
                          {
                            "name": "my-nodejs-app-7d8f9b6c5d-abc12",
                            "status": "Running"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid devbox name",
                    "value": {
                      "code": 400,
                      "message": "Devbox name is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist in the current namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "devbox_not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to retrieve devbox information from Kubernetes or database.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "retrieval_failed": {
                    "summary": "Failed to get devbox details",
                    "value": {
                      "code": 500,
                      "message": "Internal server error occurred while retrieving devbox details",
                      "error": {
                        "type": "INTERNAL_ERROR"
                      }
                    }
                  },
                  "template_not_found": {
                    "summary": "Template not found",
                    "value": {
                      "code": 500,
                      "message": "Template not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Mutation"
        ],
        "summary": "Update devbox configuration",
        "description": "Update an existing Devbox configuration including resource allocation and port management.\n\n**Key Features:**\n- **Resource Adjustment**: Dynamically adjust CPU and memory allocation without restart\n- **Port Management**: Add, remove, or modify port configurations\n- **Flexible Updates**: Update resources only, ports only, or both simultaneously\n- **Selective Operations**: Only specified configurations are updated\n\n**Request Parameters:**\n- `resource` (optional): CPU and memory resource configuration for online adjustment\n- `ports` (optional): Array of port configurations\n  - Include `portName`: Update existing port\n  - Exclude `portName`: Create new port\n  - Existing ports not included will be deleted\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n\n**Response Data:**\n- `resource`: Updated resource configuration information (returned only when resources are updated)\n- `ports`: Updated port configuration list (returned only when ports are updated)\n\n**Error Codes:**\n- `400`: Invalid request parameters or Devbox name format\n- `404`: Devbox not found\n- `409`: Port conflict - port number already in use by another service\n- `422`: Invalid resource configuration (exceeds limits or constraints)\n- `500`: Internal server error",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Devbox update configuration. Specify resource and/or ports to update. At least one field is required.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resource": {
                    "type": "object",
                    "properties": {
                      "cpu": {
                        "anyOf": [
                          {
                            "type": "number",
                            "enum": [
                              0.1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              0.2
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              0.5
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              2
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              4
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              8
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              16
                            ]
                          }
                        ],
                        "description": "CPU allocation in cores",
                        "example": 1
                      },
                      "memory": {
                        "anyOf": [
                          {
                            "type": "number",
                            "enum": [
                              0.1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              0.5
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              1
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              2
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              4
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              8
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              16
                            ]
                          },
                          {
                            "type": "number",
                            "enum": [
                              32
                            ]
                          }
                        ],
                        "description": "Memory allocation in GB",
                        "example": 2
                      }
                    },
                    "required": [
                      "cpu",
                      "memory"
                    ],
                    "description": "Resource allocation for CPU and memory (optional)",
                    "example": {
                      "cpu": 1,
                      "memory": 2
                    }
                  },
                  "ports": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "portName": {
                              "type": "string",
                              "description": "Existing port name to update - identifies the port to modify"
                            },
                            "number": {
                              "type": "number",
                              "minimum": 1,
                              "maximum": 65535,
                              "description": "Port number (1-65535) - optional for updates"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "HTTP",
                                "GRPC",
                                "WS"
                              ],
                              "description": "Protocol type - optional for updates"
                            },
                            "exposesPublicDomain": {
                              "type": "boolean",
                              "description": "Enable public domain access - optional for updates"
                            },
                            "customDomain": {
                              "type": "string",
                              "description": "Custom domain - optional for updates"
                            }
                          },
                          "required": [
                            "portName"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "number",
                              "minimum": 1,
                              "maximum": 65535,
                              "description": "Port number (1-65535) - required for new ports"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "HTTP",
                                "GRPC",
                                "WS"
                              ],
                              "description": "Protocol type, defaults to HTTP",
                              "default": "HTTP"
                            },
                            "exposesPublicDomain": {
                              "type": "boolean",
                              "default": true,
                              "description": "Enable public domain access, defaults to true"
                            },
                            "customDomain": {
                              "type": "string",
                              "description": "Custom domain (optional)"
                            }
                          },
                          "required": [
                            "number"
                          ]
                        }
                      ],
                      "description": "Port configuration - with portName to update existing port, without portName to create new port"
                    },
                    "description": "Array of port configurations. Include portName to update existing ports, exclude portName to create new ports. Existing ports not included will be deleted. (optional)"
                  }
                },
                "title": "Update DevBox Request",
                "description": "Request schema for updating DevBox resource and/or port configurations"
              },
              "examples": {
                "resource_only": {
                  "summary": "Update resources only",
                  "value": {
                    "resource": {
                      "cpu": 2,
                      "memory": 4
                    }
                  }
                },
                "ports_only": {
                  "summary": "Update ports only",
                  "value": {
                    "ports": [
                      {
                        "portName": "existing-port-name",
                        "number": 8080,
                        "protocol": "HTTP",
                        "exposesPublicDomain": true
                      },
                      {
                        "number": 3000,
                        "protocol": "HTTP",
                        "exposesPublicDomain": false
                      }
                    ]
                  }
                },
                "both": {
                  "summary": "Update both resources and ports",
                  "value": {
                    "resource": {
                      "cpu": 4,
                      "memory": 8
                    },
                    "ports": [
                      {
                        "number": 8000,
                        "protocol": "HTTP",
                        "exposesPublicDomain": true,
                        "customDomain": "api.example.com"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox updated successfully. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters, malformed JSON, or validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid devbox name",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  },
                  "validation_error": {
                    "summary": "Request validation error",
                    "value": {
                      "code": 400,
                      "message": "Invalid request body",
                      "error": "At least one of resource or ports must be provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist in the current namespace.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "devbox_not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Port number is already in use by another service or resource.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "port_conflict": {
                    "summary": "Port conflict error",
                    "value": {
                      "code": 409,
                      "message": "Port conflict - port number already in use",
                      "error": "Port 8080 is already in use by another service"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity - Invalid resource configuration that exceeds limits or constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "resource_limit": {
                    "summary": "Resource limit exceeded",
                    "value": {
                      "code": 422,
                      "message": "Invalid resource configuration",
                      "error": "CPU request exceeds namespace quota"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to update Devbox due to server-side issues.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "update_failed": {
                    "summary": "Update operation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to update Kubernetes resources"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/delete": {
      "delete": {
        "tags": [
          "Mutation"
        ],
        "summary": "Delete a devbox by name",
        "description": "Delete a Devbox and all its associated resources including services, ingress, certificates, and persistent volumes.\n\n**Key Features:**\n- **Complete Cleanup**: Removes all Kubernetes resources associated with the Devbox\n- **Cascade Deletion**: Automatically deletes dependent resources (services, ingresses, PVCs)\n- **Safe Operation**: Validates existence before deletion\n- **Irreversible**: This action cannot be undone\n\n**Path Parameters:**\n- `name`: Devbox name to delete (must comply with DNS naming conventions)\n\n**Response Data:**\nReturns a success message confirming the deletion.\n\n**Error Codes:**\n- `400`: Invalid devbox name format\n- `404`: Devbox not found\n- `500`: Failed to delete Devbox or associated resources",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name to delete",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Devbox deleted successfully. All associated resources have been removed. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid devbox name format or validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid devbox name",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to delete Devbox or its associated resources.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "deletion_failed": {
                    "summary": "Deletion operation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to delete Kubernetes resources"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/autostart": {
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Configure autostart for a devbox",
        "description": "Configure automatic command execution when the Devbox starts. Creates RBAC and Job resources for autostart functionality.\n\n**Key Features:**\n- **Auto-execution**: Run custom commands automatically on Devbox startup\n- **RBAC Setup**: Creates ServiceAccount, Role, and RoleBinding for secure execution\n- **Job Management**: Creates Kubernetes Job to execute startup commands\n- **Custom Commands**: Support for user-defined startup scripts\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n\n**Request Body:**\n- `execCommand` (optional): Custom command to execute on startup. Defaults to runtime-specific entrypoint if not provided.\n\n**Response Data:**\nReturns autostart configuration status including whether resources were created and any job recreation information.\n\n**Error Codes:**\n- `400`: Invalid request parameters or devbox name format\n- `404`: Devbox not found\n- `500`: Failed to create autostart resources",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Autostart configuration with optional custom execution command",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "execCommand": {
                    "type": "string",
                    "description": "Custom command to execute in the devbox (optional)",
                    "example": "/bin/bash /home/devbox/project/entrypoint.sh"
                  }
                },
                "default": {},
                "description": "Request body for autostart configuration (optional, can be empty)"
              },
              "examples": {
                "default": {
                  "summary": "Use default entrypoint",
                  "value": {}
                },
                "custom_command": {
                  "summary": "Custom startup command",
                  "value": {
                    "execCommand": "/bin/bash /home/devbox/project/startup.sh"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Autostart resources created successfully. RBAC and Job resources have been configured. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "description": "Error response for autostart configuration"
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid devbox name",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "description": "Error response for autostart configuration"
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to create autostart resources.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "description": "Error response for autostart configuration"
                },
                "examples": {
                  "creation_failed": {
                    "summary": "Resource creation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to create RBAC resources"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/start": {
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Start a devbox",
        "description": "Start a paused or stopped Devbox and restore its services to active state.\n\n**Key Features:**\n- **State Transition**: Changes Devbox state from Stopped/Paused to Running\n- **Ingress Restoration**: Restores ingress configurations from pause backend to nginx\n- **Service Recovery**: Brings pods back online with full functionality\n- **Quick Resume**: Faster than creating a new Devbox\n\n**Path Parameters:**\n- `name`: Devbox name to start (must comply with DNS naming conventions)\n\n**Request Body:**\nEmpty request body (no parameters required)\n\n**Response Data:**\nReturns a success message confirming the Devbox has been started.\n\n**Error Codes:**\n- `400`: Invalid request parameters or devbox name format\n- `404`: Devbox not found\n- `500`: Failed to start Devbox or restore services",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Empty request body - no parameters required for starting a Devbox",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Start devbox request body (empty)"
              },
              "examples": {
                "default": {
                  "summary": "Start devbox",
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox started successfully. Pods are starting and ingress has been restored. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid name format",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to start Devbox or restore services.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "start_failed": {
                    "summary": "Start operation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to restore ingress configuration"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/pause": {
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Pause a devbox",
        "description": "Temporarily pause a Devbox while maintaining port allocations and configurations.\n\n**Key Features:**\n- **State Transition**: Changes Devbox state from Running to Stopped\n- **Resource Saving**: Stops compute resources to reduce costs\n- **Port Preservation**: Maintains port allocations (minimal port fees apply)\n- **Quick Recovery**: Can be quickly resumed with start operation\n- **Data Persistence**: All data and configurations are preserved\n\n**Path Parameters:**\n- `name`: Devbox name to pause (must comply with DNS naming conventions)\n\n**Request Body:**\nEmpty request body (no parameters required)\n\n**Response Data:**\nReturns a success message confirming the Devbox has been paused.\n\n**Error Codes:**\n- `400`: Invalid request parameters or devbox name format\n- `404`: Devbox not found\n- `500`: Failed to pause Devbox or update ingress",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Empty request body - no parameters required for pausing a Devbox",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Pause devbox request body (empty)"
              },
              "examples": {
                "default": {
                  "summary": "Pause devbox",
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox paused successfully. Compute resources stopped, ports maintained. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid name format",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to pause Devbox or update ingress configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "pause_failed": {
                    "summary": "Pause operation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to update ingress to pause state"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/shutdown": {
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Shutdown a devbox",
        "description": "Completely shutdown a Devbox and release all port allocations to minimize costs.\n\n**Key Features:**\n- **Complete Shutdown**: Changes Devbox state from Running to Shutdown\n- **Port Release**: Releases all port allocations (no port fees)\n- **Cost Optimization**: Frees both compute and network resources\n- **Data Persistence**: All data volumes are preserved\n- **Cold Start**: Requires full startup when reactivated\n\n**Difference from Pause:**\n- **Shutdown**: Releases ports (no port fees) - use for long-term stops\n- **Pause**: Maintains ports (small port fees) - use for short-term stops\n\n**Path Parameters:**\n- `name`: Devbox name to shutdown (must comply with DNS naming conventions)\n\n**Request Body:**\nEmpty request body (no parameters required)\n\n**Response Data:**\nReturns a success message confirming the Devbox has been shut down.\n\n**Error Codes:**\n- `400`: Invalid request parameters or devbox name format\n- `404`: Devbox not found\n- `500`: Failed to shutdown Devbox or release ports",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Empty request body - no parameters required for shutting down a Devbox",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Shutdown devbox request body (empty)"
              },
              "examples": {
                "default": {
                  "summary": "Shutdown devbox",
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox shutdown successfully. All compute resources and ports have been released. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid name format",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to shutdown Devbox or release ports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "shutdown_failed": {
                    "summary": "Shutdown operation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to release port resources"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/restart": {
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Restart a devbox",
        "description": "Perform a complete restart cycle of a Devbox, useful for applying configuration changes or recovering from errors.\n\n**Key Features:**\n- **Complete Restart Cycle**: Stop → Wait for pod deletion → Restore ingress → Start\n- **Clean State**: Ensures all containers are recreated with fresh state\n- **Configuration Refresh**: Applies any pending configuration changes\n- **Timeout Protection**: Includes timeout handling for pod deletion\n- **Ingress Recovery**: Automatically restores networking configuration\n\n**Path Parameters:**\n- `name`: Devbox name to restart (must comply with DNS naming conventions)\n\n**Request Body:**\nEmpty request body (no parameters required)\n\n**Response Data:**\nReturns a success message confirming the Devbox has been restarted.\n\n**Error Codes:**\n- `400`: Invalid request parameters or devbox name format\n- `404`: Devbox not found\n- `408`: Request timeout - pods did not delete within expected time\n- `500`: Failed to restart Devbox",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Empty request body - no parameters required for restarting a Devbox",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Restart devbox request body (empty)"
              },
              "examples": {
                "default": {
                  "summary": "Restart devbox",
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox restarted successfully. Complete restart cycle completed with all services restored. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters or devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid name format",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout - Pods did not delete within the expected time window during restart.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "timeout": {
                    "summary": "Restart timeout",
                    "value": {
                      "code": 408,
                      "message": "Restart timeout - pods did not delete within expected time",
                      "error": "Pod deletion took longer than 5 minutes"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to complete the restart cycle.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "restart_failed": {
                    "summary": "Restart operation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to restore services after restart"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/ports": {
      "put": {
        "tags": [
          "Mutation"
        ],
        "summary": "Update devbox port configurations",
        "description": "Manage Devbox port configurations with support for adding, updating, and removing ports.\n\n**Key Features:**\n- **Port Updates**: Modify existing port configurations (protocol, public access, custom domain)\n- **Port Creation**: Add new ports to expose additional services\n- **Port Deletion**: Remove ports by excluding them from the request\n- **Declarative Management**: Specify desired state, system handles the diff\n- **Public Domain Support**: Auto-generate or use custom domains\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n\n**Request Body:**\nArray of port configurations:\n- **With portName**: Updates existing port\n- **Without portName**: Creates new port\n- **Ports not included**: Will be deleted\n\n**Response Data:**\nReturns the complete list of port configurations after the update operation, including generated public domains and network names.\n\n**Error Codes:**\n- `400`: Invalid request parameters or port configuration\n- `404`: Devbox not found\n- `500`: Failed to update port configurations",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Port configuration array specifying the desired state of all ports. Ports not included will be deleted.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ports": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "portName": {
                              "type": "string",
                              "description": "Existing port name to update - identifies the port to modify"
                            },
                            "number": {
                              "type": "number",
                              "minimum": 1,
                              "maximum": 65535,
                              "description": "Port number (1-65535) - optional for updates"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "HTTP",
                                "GRPC",
                                "WS"
                              ],
                              "description": "Protocol type - optional for updates"
                            },
                            "exposesPublicDomain": {
                              "type": "boolean",
                              "description": "Enable public domain access - optional for updates"
                            },
                            "customDomain": {
                              "type": "string",
                              "description": "Custom domain - optional for updates"
                            }
                          },
                          "required": [
                            "portName"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "number",
                              "minimum": 1,
                              "maximum": 65535,
                              "description": "Port number (1-65535) - required for new ports"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "HTTP",
                                "GRPC",
                                "WS"
                              ],
                              "description": "Protocol type, defaults to HTTP",
                              "default": "HTTP"
                            },
                            "exposesPublicDomain": {
                              "type": "boolean",
                              "default": true,
                              "description": "Enable public domain access, defaults to true"
                            },
                            "customDomain": {
                              "type": "string",
                              "description": "Custom domain (optional)"
                            }
                          },
                          "required": [
                            "number"
                          ]
                        }
                      ],
                      "description": "Port configuration - with portName to update existing port, without portName to create new port"
                    },
                    "description": "Array of port configurations. Include portName to update existing ports, exclude portName to create new ports. Existing ports not included will be deleted."
                  }
                },
                "required": [
                  "ports"
                ],
                "title": "Update DevBox Ports Request",
                "description": "Request schema for updating DevBox port configurations"
              },
              "examples": {
                "update_existing": {
                  "summary": "Update existing port",
                  "value": {
                    "ports": [
                      {
                        "portName": "existing-port-abc",
                        "number": 8080,
                        "protocol": "HTTP",
                        "exposesPublicDomain": true
                      }
                    ]
                  }
                },
                "create_new": {
                  "summary": "Create new ports",
                  "value": {
                    "ports": [
                      {
                        "number": 3000,
                        "protocol": "HTTP",
                        "exposesPublicDomain": true
                      },
                      {
                        "number": 5432,
                        "protocol": "HTTP",
                        "exposesPublicDomain": false
                      }
                    ]
                  }
                },
                "mixed_operations": {
                  "summary": "Update, create, and delete ports",
                  "value": {
                    "ports": [
                      {
                        "portName": "keep-port-abc",
                        "number": 8080,
                        "protocol": "GRPC",
                        "exposesPublicDomain": true,
                        "customDomain": "api.example.com"
                      },
                      {
                        "number": 9000,
                        "protocol": "HTTP",
                        "exposesPublicDomain": true
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "DevBox ports updated successfully. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request parameters, port configuration, or devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "invalid_port": {
                    "summary": "Invalid port configuration",
                    "value": {
                      "code": 400,
                      "message": "Invalid request body",
                      "error": "Port number must be between 1 and 65535"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to update port configurations or create ingress resources.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "HTTP error code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error": {
                      "description": "Detailed error information (optional)"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ],
                  "title": "Error Response",
                  "description": "Error response schema"
                },
                "examples": {
                  "update_failed": {
                    "summary": "Port update failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to update service ports"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/release": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Get devbox release list by name",
        "description": "Retrieve all release versions for a specific Devbox, including version history and status information.\n\n**Key Features:**\n- **Version History**: List all releases with creation timestamps\n- **Status Tracking**: View release status (Success, Building, Failed)\n- **Image Information**: Get container image addresses for each release\n- **Tag Management**: See all version tags and descriptions\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n\n**Response Data:**\nReturns an array of release objects, each containing:\n- Release ID and name\n- Version tag and description\n- Creation time\n- Build status\n- Container image address\n\n**Error Codes:**\n- `400`: Invalid devbox name format\n- `500`: Failed to retrieve release list",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved devbox release list with version history and status information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Version ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Version name"
                          },
                          "devboxName": {
                            "type": "string",
                            "description": "Devbox name"
                          },
                          "createTime": {
                            "type": "string",
                            "description": "Creation time in YYYY-MM-DD HH:mm format"
                          },
                          "tag": {
                            "type": "string",
                            "description": "Version tag"
                          },
                          "status": {
                            "type": "object",
                            "properties": {
                              "value": {
                                "type": "string",
                                "description": "Status value"
                              },
                              "label": {
                                "type": "string",
                                "description": "Status label"
                              }
                            },
                            "required": [
                              "value",
                              "label"
                            ],
                            "description": "Version status"
                          },
                          "description": {
                            "type": "string",
                            "description": "Version description"
                          },
                          "image": {
                            "type": "string",
                            "description": "Release image address"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "devboxName",
                          "createTime",
                          "tag",
                          "status",
                          "description",
                          "image"
                        ]
                      },
                      "description": "List of devbox versions"
                    }
                  },
                  "required": [
                    "data"
                  ]
                },
                "examples": {
                  "success": {
                    "summary": "Release list retrieved",
                    "value": {
                      "data": [
                        {
                          "id": "release-123-abc",
                          "name": "my-devbox-v1.0.0",
                          "devboxName": "my-devbox",
                          "createTime": "2024-01-15 10:30",
                          "tag": "v1.0.0",
                          "status": {
                            "value": "Success",
                            "label": "Success"
                          },
                          "description": "First stable release",
                          "image": "registry.cloud.sealos.io/ns-user123/my-devbox:v1.0.0"
                        },
                        {
                          "id": "release-456-def",
                          "name": "my-devbox-v0.9.0",
                          "devboxName": "my-devbox",
                          "createTime": "2024-01-10 09:15",
                          "tag": "v0.9.0",
                          "status": {
                            "value": "Success",
                            "label": "Success"
                          },
                          "description": "Beta release",
                          "image": "registry.cloud.sealos.io/ns-user123/my-devbox:v0.9.0"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid devbox name format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid devbox name",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name format"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to retrieve release list from Kubernetes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "retrieval_failed": {
                    "summary": "Failed to get releases",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to list DevboxRelease resources"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Release a specific devbox version",
        "description": "Create a new release version by snapshotting the current Devbox state and building a container image.\n\n**Key Features:**\n- **Version Snapshot**: Captures the current state of the Devbox\n- **Image Building**: Automatically builds and pushes a container image\n- **Tag Management**: Version releases with custom tags\n- **Description Support**: Add release notes and descriptions\n- **Deployment Ready**: Released images can be deployed to production\n\n**Prerequisites:**\n- Devbox must be in **Stopped** or **Paused** state before releasing\n- Devbox must exist and be accessible\n\n**Path Parameters:**\n- `name`: Devbox name to release (must comply with DNS naming conventions)\n\n**Request Body:**\n- `tag`: Version tag for this release (must be unique)\n- `releaseDes`: Optional description or release notes\n\n**Response Data:**\nReturns release creation information including the assigned tag, description, and creation timestamp.\n\n**Error Codes:**\n- `400`: Invalid request parameters or devbox name format\n- `404`: Devbox not found\n- `409`: Release with the same tag already exists\n- `500`: Failed to create release or build image",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "requestBody": {
          "description": "Release configuration with version tag and optional description",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Release tag"
                  },
                  "releaseDes": {
                    "type": "string",
                    "default": "",
                    "description": "Release description"
                  }
                },
                "required": [
                  "tag"
                ]
              },
              "examples": {
                "basic": {
                  "summary": "Basic release",
                  "value": {
                    "tag": "v1.0.0",
                    "releaseDes": ""
                  }
                },
                "with_description": {
                  "summary": "Release with description",
                  "value": {
                    "tag": "v1.2.0",
                    "releaseDes": "Added new features: API improvements, bug fixes, performance optimization"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox release created successfully. Image building process has started. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request body, tag format, or devbox name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid_tag": {
                    "summary": "Invalid tag format",
                    "value": {
                      "code": 400,
                      "message": "Invalid request body",
                      "error": "Tag must comply with DNS naming conventions"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified Devbox does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "not_found": {
                    "summary": "Devbox not found",
                    "value": {
                      "code": 404,
                      "message": "Devbox not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict - A release with the specified tag already exists for this Devbox.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "tag_conflict": {
                    "summary": "Tag already exists",
                    "value": {
                      "code": 409,
                      "message": "Devbox release with this tag already exists",
                      "error": "Release v1.0.0 already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to create release or build container image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "error": {}
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "creation_failed": {
                    "summary": "Release creation failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "error": "Failed to create DevboxRelease resource"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/release/{tag}": {
      "delete": {
        "tags": [
          "Mutation"
        ],
        "summary": "Delete a specific devbox release",
        "description": "Delete a specific release version and its associated container image.\n\n**Key Features:**\n- **Release Deletion**: Removes DevboxRelease resource from Kubernetes\n- **Image Cleanup**: Deletes the associated container image from registry\n- **Safe Operation**: Validates release existence before deletion\n- **Irreversible**: This action cannot be undone\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n- `tag`: Release tag to delete (must comply with DNS naming conventions)\n\n**Response Data:**\nReturns deletion confirmation with the devbox name, deleted tag, and timestamp.\n\n**Error Codes:**\n- `400`: Invalid devbox name or release tag format\n- `404`: Release not found\n- `500`: Failed to delete release or container image",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "description": "Release name to delete",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Release deleted successfully. The release and its container image have been removed. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid devbox name or release tag format.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid_format": {
                    "summary": "Invalid parameter format",
                    "value": {
                      "code": 400,
                      "message": "Invalid devbox name or release name format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The specified release does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "not_found": {
                    "summary": "Release not found",
                    "value": {
                      "code": 404,
                      "message": "Release not found",
                      "data": "Release v1.0.0 does not exist for devbox my-devbox"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to delete release or container image.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "deletion_failed": {
                    "summary": "Deletion failed",
                    "value": {
                      "code": 500,
                      "message": "Internal server error",
                      "data": "Failed to delete container image from registry"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/release/{tag}/deploy": {
      "post": {
        "tags": [
          "Mutation"
        ],
        "summary": "Deploy a specific devbox release version",
        "description": "Deploy a release version to AppLaunchpad as a production application.\n\n**Key Features:**\n- **Production Deployment**: Converts Devbox release to production application\n- **Fixed Resources**: Deploys with 2 CPU cores and 2GB memory configuration\n- **Port Mapping**: Automatically maps Devbox ports to application services\n- **Environment Preservation**: Maintains environment variables from the Devbox\n- **Public Access**: Generates public domains for exposed ports\n\n**Prerequisites:**\n- Release must exist and be in **Success** status\n- Release image building must be completed\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n- `tag`: Release version tag to deploy\n\n**Request Body:**\nEmpty request body (no parameters required)\n\n**Response Data:**\nReturns deployment information including:\n- Application configuration details\n- Public domain access URLs\n- Resource allocations\n- Port mappings\n\n**Error Codes:**\n- `400`: Invalid request parameters or path format\n- `404`: Devbox or release tag not found\n- `500`: Deployment failed or internal error",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "description": "Devbox release version tag",
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "description": "Empty request body - deployment uses release configuration",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "No request body needed - parameters are passed via URL path"
              },
              "examples": {
                "default": {
                  "summary": "Deploy release",
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Devbox release deployed successfully to AppLaunchpad. Application is now running in production. No content returned."
          },
          "400": {
            "description": "Bad Request - Invalid request body or path parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "invalid_params": {
                    "summary": "Invalid parameters",
                    "value": {
                      "code": 400,
                      "error": "Invalid devbox name or tag format"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Devbox or release tag does not exist, or release is not in Success status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "release_not_found": {
                    "summary": "Release not found",
                    "value": {
                      "code": 404,
                      "error": "Release tag v1.0.0 not found for devbox my-devbox"
                    }
                  },
                  "release_not_ready": {
                    "summary": "Release not ready",
                    "value": {
                      "code": 404,
                      "error": "Release is not in Success status. Current status: Building"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Deployment failed or AppLaunchpad service error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "error": {}
                  },
                  "required": [
                    "code"
                  ]
                },
                "examples": {
                  "deployment_failed": {
                    "summary": "Deployment failed",
                    "value": {
                      "code": 500,
                      "error": "Failed to create application in AppLaunchpad"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/{name}/monitor": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Get devbox resource usage monitoring data",
        "description": "Retrieve time-series monitoring data for CPU and memory usage of a specific Devbox.\n\n**Key Features:**\n- **Resource Monitoring**: Track CPU and memory usage over time\n- **Time-series Data**: Get historical data points with timestamps\n- **Flexible Time Range**: Query specific time periods or default to last hour\n- **Human-readable Format**: Includes formatted timestamps for easy display\n\n**Path Parameters:**\n- `name`: Devbox name (must comply with DNS naming conventions)\n\n**Query Parameters (Optional):**\n- `start`: Start timestamp in milliseconds (defaults to 1 hour ago)\n- `end`: End timestamp in milliseconds (defaults to current time)\n- `step`: Data sampling step interval (defaults to \"1m\")\n\n**Response Data:**\nReturns an array of monitoring data points, each containing:\n- `timestamp`: Unix timestamp in seconds\n- `readableTime`: Human-readable time format (YYYY/MM/DD HH:mm)\n- `cpu`: CPU usage percentage\n- `memory`: Memory usage percentage\n\n**Error Codes:**\n- `400`: Invalid devbox name or missing required parameters\n- `500`: Failed to fetch monitoring data from monitoring service",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Devbox name",
            "schema": {
              "type": "string",
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
              "minLength": 1,
              "maxLength": 63
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "Start timestamp in milliseconds",
            "schema": {
              "type": "string",
              "example": "1697356680000"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "description": "End timestamp in milliseconds",
            "schema": {
              "type": "string",
              "example": "1697360280000"
            }
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "description": "Data sampling step interval (e.g., \"1m\", \"5m\", \"1h\")",
            "schema": {
              "type": "string",
              "default": "1m",
              "example": "1m"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved monitoring data with CPU and memory usage metrics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "enum": [
                        200
                      ],
                      "description": "Success status code"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "number",
                            "description": "Unix timestamp in seconds",
                            "example": 1760510280
                          },
                          "readableTime": {
                            "type": "string",
                            "description": "Human-readable time format (YYYY/MM/DD HH:mm)",
                            "example": "2025/10/15 14:38"
                          },
                          "cpu": {
                            "type": "number",
                            "description": "CPU usage percentage",
                            "example": 1.08
                          },
                          "memory": {
                            "type": "number",
                            "description": "Memory usage percentage",
                            "example": 10.32
                          }
                        },
                        "required": [
                          "timestamp",
                          "readableTime",
                          "cpu",
                          "memory"
                        ],
                        "title": "Monitor Data Point",
                        "description": "Single data point containing resource usage metrics"
                      },
                      "description": "Array of monitor data points ordered by timestamp",
                      "example": [
                        {
                          "timestamp": 1760510280,
                          "readableTime": "2025/10/15 14:38",
                          "cpu": 1.08,
                          "memory": 10.32
                        },
                        {
                          "timestamp": 1760510340,
                          "readableTime": "2025/10/15 14:39",
                          "cpu": 1.18,
                          "memory": 10.37
                        }
                      ]
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "title": "Monitor Success Response",
                  "description": "Successful response containing monitor data"
                },
                "examples": {
                  "success": {
                    "summary": "Monitor data retrieved",
                    "value": {
                      "code": 200,
                      "data": [
                        {
                          "timestamp": 1760510280,
                          "readableTime": "2025/10/15 14:38",
                          "cpu": 1.08,
                          "memory": 10.32
                        },
                        {
                          "timestamp": 1760510340,
                          "readableTime": "2025/10/15 14:39",
                          "cpu": 1.18,
                          "memory": 10.37
                        },
                        {
                          "timestamp": 1760510400,
                          "readableTime": "2025/10/15 14:40",
                          "cpu": 1.25,
                          "memory": 10.45
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid devbox name or missing required parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error status code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Failed to fetch monitor data"
                    },
                    "error": {
                      "description": "Error details"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "title": "Monitor Error Response",
                  "description": "Error response when monitor data retrieval fails"
                },
                "examples": {
                  "invalid_name": {
                    "summary": "Invalid or missing devbox name",
                    "value": {
                      "code": 400,
                      "message": "Devbox name is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to fetch monitoring data from monitoring service.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "Error status code",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Failed to fetch monitor data"
                    },
                    "error": {
                      "description": "Error details"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "title": "Monitor Error Response",
                  "description": "Error response when monitor data retrieval fails"
                },
                "examples": {
                  "fetch_failed": {
                    "summary": "Failed to fetch monitor data",
                    "value": {
                      "code": 500,
                      "message": "Failed to fetch monitor data",
                      "error": "Connection to monitoring service failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/devbox/templates": {
      "get": {
        "tags": [
          "Query"
        ],
        "summary": "Get devbox configuration and runtime information",
        "description": "Retrieve available runtime environments and template configurations for creating Devboxes.\n\n**Key Features:**\n- **Runtime Discovery**: List all available runtime environments (languages, frameworks, OS)\n- **Template Details**: Get configuration details for each template\n- **Version Information**: View template versions and specifications\n- **Configuration Preview**: See default ports, commands, and working directories\n\n**No Parameters Required:**\nThis endpoint requires no query parameters or request body.\n\n**Response Data:**\nReturns two arrays:\n- `runtime`: List of available template repositories (runtime environments)\n  - Template repository UID and name\n  - Icon ID (runtime identifier)\n  - Kind (FRAMEWORK, OS, LANGUAGE, SERVICE, CUSTOM)\n  - Description and public access status\n  \n- `config`: List of template configurations\n  - Template UID and name\n  - Runtime association\n  - Configuration details (ports, commands, user, working directory)\n\n**Error Codes:**\n- `500`: Failed to retrieve templates from database or Kubernetes",
        "responses": {
          "200": {
            "description": "Successfully retrieved devbox configuration. Returns available runtimes and their template configurations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "runtime": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "uid": {
                                "type": "string",
                                "description": "Template repository unique identifier"
                              },
                              "iconId": {
                                "type": "string",
                                "nullable": true,
                                "description": "Runtime icon ID (runtime name)"
                              },
                              "name": {
                                "type": "string",
                                "description": "Template repository name"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "FRAMEWORK",
                                  "OS",
                                  "LANGUAGE",
                                  "SERVICE",
                                  "CUSTOM"
                                ],
                                "description": "Template repository kind"
                              },
                              "description": {
                                "type": "string",
                                "nullable": true,
                                "description": "Template repository description"
                              },
                              "isPublic": {
                                "type": "boolean",
                                "description": "Whether the template repository is public"
                              }
                            },
                            "required": [
                              "uid",
                              "iconId",
                              "name",
                              "kind",
                              "description",
                              "isPublic"
                            ]
                          },
                          "description": "List of available runtimes (template repositories)"
                        },
                        "config": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "templateUid": {
                                "type": "string",
                                "description": "Template unique identifier"
                              },
                              "templateName": {
                                "type": "string",
                                "description": "Template name"
                              },
                              "runtimeUid": {
                                "type": "string",
                                "description": "Runtime unique identifier (template repository uid)"
                              },
                              "runtime": {
                                "type": "string",
                                "nullable": true,
                                "description": "Runtime name (from iconId field)"
                              },
                              "config": {
                                "type": "object",
                                "properties": {
                                  "appPorts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        },
                                        "port": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "port",
                                        "protocol"
                                      ]
                                    }
                                  },
                                  "ports": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "containerPort": {
                                          "type": "number"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "protocol": {
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "containerPort",
                                        "name",
                                        "protocol"
                                      ]
                                    }
                                  },
                                  "releaseArgs": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "releaseCommand": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "user": {
                                    "type": "string"
                                  },
                                  "workingDir": {
                                    "type": "string"
                                  }
                                },
                                "description": "Parsed template configuration"
                              }
                            },
                            "required": [
                              "templateUid",
                              "templateName",
                              "runtimeUid",
                              "runtime",
                              "config"
                            ]
                          },
                          "description": "List of template configurations"
                        }
                      },
                      "required": [
                        "runtime",
                        "config"
                      ]
                    }
                  },
                  "required": [
                    "data"
                  ]
                },
                "examples": {
                  "success": {
                    "summary": "Templates retrieved",
                    "value": {
                      "data": {
                        "runtime": [
                          {
                            "uid": "tpl-repo-123",
                            "iconId": "node.js",
                            "name": "Node.js Runtime",
                            "kind": "LANGUAGE",
                            "description": "Node.js JavaScript runtime environment",
                            "isPublic": true
                          },
                          {
                            "uid": "tpl-repo-456",
                            "iconId": "python",
                            "name": "Python Runtime",
                            "kind": "LANGUAGE",
                            "description": "Python programming language runtime",
                            "isPublic": true
                          }
                        ],
                        "config": [
                          {
                            "templateUid": "tpl-123-abc",
                            "templateName": "Node.js 20 LTS",
                            "runtimeUid": "tpl-repo-123",
                            "runtime": "node.js",
                            "config": {
                              "appPorts": [
                                {
                                  "name": "http",
                                  "port": 3000,
                                  "protocol": "HTTP"
                                }
                              ],
                              "ports": [
                                {
                                  "containerPort": 3000,
                                  "name": "http",
                                  "protocol": "TCP"
                                }
                              ],
                              "releaseCommand": [
                                "/bin/bash",
                                "-c"
                              ],
                              "releaseArgs": [
                                "npm",
                                "start"
                              ],
                              "user": "devbox",
                              "workingDir": "/home/devbox/project"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Failed to retrieve templates from database or process configurations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number"
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "code",
                    "error"
                  ]
                },
                "examples": {
                  "retrieval_failed": {
                    "summary": "Failed to get templates",
                    "value": {
                      "code": 500,
                      "error": "Failed to query template repositories from database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "kubeconfigAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Kubeconfig for authentication"
      },
      "jwtAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization-Bearer",
        "description": "JWT token for authentication"
      }
    }
  }
}